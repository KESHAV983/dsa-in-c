#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node *left, *right;
};
struct Node *createNode(int value)
{
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}
struct Node *insert(struct Node *root, int value)
{
    if (root == NULL)
    {
        return createNode(value);
    }
    if (value < root->data)
    {
        root->left = insert(root->left, value);
    }
    else if (value > root->data)
    {
        root->right = insert(root->right, value);
    }
    return root;
}
void inorder(struct Node *root)
{
    if (root != NULL)
    {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}
int main()
{
    struct Node *root = NULL;
    int n, val, i;
    printf("How many nodes you want to insert: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++)
    {
        printf("Enter value: ");
        scanf("%d", &val);
        root = insert(root, val);
    }
    printf("Inorder Traversal of BST: ");
    inorder(root);
    return 0;
}
# Code(b) : Delete a node from BST
#include <stdio.h>
#include <stdlib.h>
                   struct Node
{
    int data;
    struct Node *left, *right;
};
struct Node *createNode(int value)
{
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}
struct Node *insert(struct Node *root, int value)
{
    if (root == NULL)
    {
        return createNode(value);
    }
    if (value < root->data)
    {
        root->left = insert(root->left, value);
    }
    else if (value > root->data)
    {
        root->right = insert(root->right, value);
    }
    return root;
}
struct Node *findMin(struct Node *root)
{
    while (root->left != NULL)
    {
        root = root->left;
    }
    return root;
}
struct Node *deleteNode(struct Node *root, int value)
{
    if (root == NULL)
    {
        return root;
    }
    if (value < root->data)
    {
        root->left = deleteNode(root->left, value);
    }
    else if (value > root->data)
    {
        root->right = deleteNode(root->right, value);
    }
    else
    {
        if (root->left == NULL)
        {
            struct Node *temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL)
        {
            struct Node *temp = root->left;
            free(root);
            return temp;
        }
        struct Node *temp = findMin(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}
void inorder(struct Node *root)
{
    if (root != NULL)
    {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}
int main()
{
    struct Node *root = NULL;
    int n, val, del, i;
    printf("How many nodes to insert: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++)
    {
        printf("Enter value: ");
        scanf("%d", &val);
        root = insert(root, val);
    }
    printf("Inorder before deletion: ");
    inorder(root);
    printf("\nEnter value to delete: ");
    scanf("%d", &del);
    root = deleteNode(root, del);
    printf("Inorder after deletion: ");
    inorder(root);
    return 0;
}
ode(c) : In order traversal
#include <stdio.h>
#include <stdlib.h>
         struct Node
{
    int data;
    struct Node *left, *right;
};
struct Node *createNode(int value)
{
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}
struct Node *insert(struct Node *root, int value)
{
    if (root == NULL)
    {
        return createNode(value);
    }
    if (value < root->data)
    {
        root->left = insert(root->left, value);
    }
    else if (value > root->data)
    {
        root->right = insert(root->right, value);
    }
    return root;
}
void inorder(struct Node *root)
{
    if (root != NULL)
    {
        ode(c) : In order traversal
#include <stdio.h>
#include <stdlib.h>
                 struct Node
        {
            int data;
            struct Node *left, *right;
        };
        struct Node *createNode(int value)
        {
            struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
            newNode->data = value;
            newNode->left = newNode->right = NULL;
            return newNode;
        }
        struct Node *insert(struct Node * root, int value)
        {
            if (root == NULL)
            {
                return createNode(value);
            }
            if (value < root->data)
            {
                root->left = insert(root->left, value);
            }
            else if (value > root->data)
            {
                root->right = insert(root->right, value);
            }
            return root;
        }
        void inorder(struct Node * root)
        {
            if (root != NULL)
            {
                ode(c) : In order traversal
#include <stdio.h>
#include <stdlib.h>
                         struct Node
                {
                    int data;
                    struct Node *left, *right;
                };
                struct Node *createNode(int value)
                {
                    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
                    newNode->data = value;
                    newNode->left = newNode->right = NULL;
                    return newNode;
                }
                struct Node *insert(struct Node * root, int value)
                {
                    if (root == NULL)
                    {
                        return createNode(value);
                    }
                    if (value < root->data)
                    {
                        root->left = insert(root->left, value);
                    }
                    else if (value > root->data)
                    {
                        root->right = insert(root->right, value);
                    }
                    return 0;
                }